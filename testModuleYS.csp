// Possible Extensions, generally the enums are not used in this iteration of the system
enum {dummy_mod, CS1010, CS1020, CS2010, CS2100, CS3230, CS4211};
enum {dummy_L, LCS1, LCS2};	//Lecturer , assume that 1 lecturer can teach any module
enum {dummy_TA, TA1CS1010, TA1CS1020, TA1CS2010, TA1CS2100, TA1CS3230, TA1CS4211};	//TA
enum {dummy_LT, LT1, LT2};	//lecture venue
enum {dummy_TR, TR1,TR2,TR3};	//tutorial venue
//enum {dummy_t, t0800,t0830,t0900,t0930,t1000,t1030,t1100,t1130,t1200,t1230,t1300,t1330,t1400,t1430,t1500,t1530,t1600,t1630,t1700,t1730,t1800,t1830,t1900,t1930}; //starting timeslots
enum {dummy_t, t0800,t0830,t0900,t0930,t1000,t1030,t1100,t1130,t1200,t1230,t1300,t1330}; //starting timeslots
enum {dummy_day, Mon, Tue, Wed, Thu, Fri};

#define numOfModules 3;	// 3
#define numOfTutorials 3; // 3
#define numOfLTTimeslots 2; 
#define numOfTRTimeslots 2; 
//#define numOfTAs 6;
//#define numOfLecturers 2;
#define numOfLTs 2;
#define numOfTRs 2;
#define available 0;
#define infinity 1000000;
#define empty 0;

//var TAs[numOfTAs+1] = [dummy_TA, TA1CS1010, TA1CS1020, TA1CS2010, TA1CS2100, TA1CS3230, TA1CS4211];
//var lecture_duration[numOfModules+1] = [dummy_mod,4,4,4]; //[dummy_mod,4,4,4,4,4,5];
//var tutorial_duration[numOfModules+1] = [dummy_mod,2,2,2]; //[dummy_mod,2,2,2,2,2,2];

// _size[venue_idx] = int
var module_size[numOfModules+1] = [dummy_mod, 200, 120, 100]; //[dummy_mod,200,120,100, 120, 80,85];
var tutorial_size[numOfTutorials+1] = [dummy_mod,200,120, 100]; // same as module size for now
var TR_size[numOfTRs+1] = [dummy_TR,250,120];
var LT_size[numOfLTs+1] = [dummy_LT,250,120];


// staff available slots [lecturer_idx,slot_idx] = 0 for avail, 1 for taken
//var lecturer_avail[numOfLecturers+1][numOfTimeslots+1];
//var TA_avail[numOfTAs+1][numOfTimeslots+1];

// venue available slots [venue_idx,slot_idx] = bool
var LT_Timetable[numOfLTs+1][numOfLTTimeslots+1];
var TR_Timetable[numOfTRs+1][numOfTRTimeslots+1];
var lecture_time_is_allocated[numOfModules+1];
var lecture_venue_is_allocated[numOfModules+1];
//var lecture_staff_is_allocated[numOfModules+1];
var lecture_space_utilization[numOfModules+1];
var lecture_times_used[numOfLTs+1];
var tutorial_time_is_allocated[numOfTutorials+1];
var tutorial_venue_is_allocated[numOfTutorials+1];
//var tutorial_staff_is_allocated[numOfTutorials+1];
var tutorial_space_utilization[numOfTutorials+1];
var tutorial_times_used[numOfTRs+1];

var averageTimesLTUsed = numOfModules*100/numOfLTs;		// variables which represent the optimal number of times a room should be used
var averageTimesTRUsed = numOfTutorials*100/numOfTRs;

var checkedLTUT = false;	// variables to control the number of states in the graph, to avoid endless checking of the UT rate and Average times used
var checkedLTAvg = false;

// i is the module code, j is the LT code, K is the timeslot code
allocateLectureClass(i,j,k) = [lecture_time_is_allocated[i]==0 && lecture_venue_is_allocated[i]==0 && LT_Timetable[j][k]==available && module_size[i]<=LT_size[j] ] //&& LT_Timetable[j][k+1]==available
								LectureAllocate.i.j.k{
									lecture_time_is_allocated[i]=k; //time is allocated
									lecture_venue_is_allocated[i]=j;
									lecture_space_utilization[i]=(module_size[i]*100)/LT_size[j];
									lecture_times_used[j] = lecture_times_used[j] + 100;
									LT_Timetable[j][k]=i;
									
									//LT_Timetable[j][k+1]=i;
									//var x=1;
									checkedLTUT = false;	// to ensure that we check the UT and Avg later
									checkedLTAvg = false
								}
							->allocateLectureClass((i+1)%3,j,k);
//allocateLectureStaff(i,j,k) = [lecture_staff_is_allocated[i]==0]allocate.i{var x = 1;} -> allocateLectureStaff(i,j,k);



var lectureUtilization = empty;		// intitalize average lecture UT Rate, the higher the UT rate the better

var usageDistributionDifferenceLT = infinity;		// intialize average LT times used, the smaller the difference between our schedule's average time used with the optimal the better
var currentLTUT;
var currentLTUsageDifference;
addLectureUtilization() = UpdateLectureUtilization{ 
                var index = 1; 
                var totalUtilization = 0;
                
                while (index < numOfModules+1) { 
                        totalUtilization = totalUtilization + lecture_space_utilization[index];
                        index = index+1;
                };
                if(totalUtilization > lectureUtilization){
                      lectureUtilization = totalUtilization;
                };
                currentLTUT = totalUtilization;
                checkedLTUT = true;
        } -> Skip;
        
checkTimesUsed()=UpdateLectureTimesUsed{
 				var i = 1;
 				var averageDifference = 0;
                while (i < numOfLTs+1){
               		
               		var d = lecture_times_used[i] - averageTimesLTUsed;
               		if(d<0){
               			d = -d;
               		}
               		averageDifference = averageDifference + d;
               		i = i+1;
                };
                if(usageDistributionDifferenceLT > averageDifference){
                	usageDistributionDifferenceLT = averageDifference;
                };
                currentLTUsageDifference = averageDifference;
                checkedLTAvg = true;
                } -> Skip;
        
		
AllocateLecture() = (|||i:{1..numOfModules}@(|||j:{1..numOfLTs}@(|||k:{1..numOfLTTimeslots}@(allocateLectureClass(i,j,k)[][lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 && lecture_venue_is_allocated[3]!=0 && checkedLTUT == false]addLectureUtilization()[][lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 && lecture_venue_is_allocated[3]!=0 && checkedLTAvg==false]checkTimesUsed()))));

var checkedTRUT = false;
var checkedTRAvg = false;

// i is the module code, j is the TRcode, K is the timeslot code
allocateTutorialClass(i,j,k) = [lecture_time_is_allocated[i]!=0 && lecture_time_is_allocated[i]!=k && tutorial_time_is_allocated[i]==0 && tutorial_venue_is_allocated[i]==0 && TR_Timetable[j][k]==available && module_size[i]<=TR_size[j]] 
								TutorialAllocate.i.j.k{
									tutorial_time_is_allocated[i]=k; //time is allocated
									tutorial_venue_is_allocated[i]=j;
									tutorial_space_utilization[i]=(tutorial_size[i]*100)/TR_size[j];
									tutorial_times_used[j] = tutorial_times_used[j] + 100;
									TR_Timetable[j][k]=i;
									
									//LT_Timetable[j][k+1]=i;
									var x=1;
									
									checkedTRUT = false;
									checkedTRAvg = false;
									
								}
							->allocateTutorialClass((i+1)%3,j,k);
							
var tutorialUtilization = empty;

var usageDistributionDifferenceTR = infinity;

var currentTRUT;
var currentTRUsageDifference;

addTutorialUtilization() = UpdateTutorialUtilization{ 
                var index = 1; 
                var totalUtilization = 0;
                
                while (index < numOfTutorials+1) { 
                        totalUtilization = totalUtilization + tutorial_space_utilization[index];
                        index = index+1;
                };
                if(totalUtilization > tutorialUtilization){
                      tutorialUtilization = totalUtilization;
                };
                checkedTRUT = true;
                currentTRUT = totalUtilization;
               
        } -> Skip;
        
checkTRTimesUsed()=UpdateTutorialTimesUsed{
 				var i = 1;
 				var averageDifference = 0;
                while (i < numOfTRs+1){
               		
               		var d = tutorial_times_used[i] - averageTimesTRUsed;
               		if(d<0){
               			d = -d;
               		}
               		averageDifference = averageDifference + d;
               		i = i+1;
                };
                if(usageDistributionDifferenceTR > averageDifference){
                	usageDistributionDifferenceTR = averageDifference;
                };
                checkedTRAvg = true;
                currentTRUsageDifference = averageDifference;
                } -> Skip;
                
AllocateTutorial() = (|||i:{1..numOfTutorials}@(|||j:{1..numOfTRs}@(|||k:{1..numOfTRTimeslots}@(allocateTutorialClass(i,j,k)[][tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 && tutorial_venue_is_allocated[3]!=0 && checkedTRUT==false]addTutorialUtilization()[][tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 && tutorial_venue_is_allocated[3]!=0 && checkedTRAvg==false]checkTRTimesUsed()))));					
//AllocateTutorial() = (|||i:{1..numOfTutorial}@(allocateTutorialClass(i)[]allocateTutorialStaff(i)));
//AllocateTutorial = (|||i:{1..numOfTutorial},j:{1..numOfTR},k:{1..numOfTimeslot}@(allocateTutorialClass(i,j,k)[]allocateTutorialStaff(i,j,k)));


// we only start assigning tutorials after we assigned the lectures, meaning lectures have priority over tutorials        
P_AllocateAll() =  AllocateLecture()|||[lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 && lecture_venue_is_allocated[3]!=0&&checkedLTAvg==true&&checkedLTUT==true]AllocateTutorial();

// Assertions

// no #assert P_AllocateAll() deadlockfree; our program should be able to assign a schedule which has deadlock to show that resources need to be optimized

// check that a non deadlock schedule is possible given the number of rooms, lectures and tutorials
#define noClash tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 && tutorial_venue_is_allocated[3]!=0 && lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 && lecture_venue_is_allocated[3]!=0 && tutorial_time_is_allocated[1]!=lecture_time_is_allocated[1] && tutorial_time_is_allocated[2]!=lecture_time_is_allocated[2] && tutorial_time_is_allocated[3]!=lecture_time_is_allocated[3];
// Experiment B: #define noClash tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 && lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 && /*lecture_venue_is_allocated[3]!=0 &&*/ tutorial_time_is_allocated[1]!=lecture_time_is_allocated[1] && tutorial_time_is_allocated[2]!=lecture_time_is_allocated[2];
#assert P_AllocateAll() reaches noClash;

//Experiment C: Determine if a schedule that has both the highest room utilization rate observed and the lowest room usage distribution difference observed can be attained
#define optimalPossible currentLTUT==lectureUtilization && currentLTUsageDifference==usageDistributionDifferenceLT && currentTRUT==tutorialUtilization && currentTRUsageDifference==usageDistributionDifferenceTR ;
#assert P_AllocateAll() reaches optimalPossible;

#define lecturesAllocated lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 /*&& lecture_venue_is_allocated[3]!=0*/;
#assert P_AllocateAll() reaches lecturesAllocated with max(lectureUtilization);
#assert P_AllocateAll() reaches lecturesAllocated with min(usageDistributionDifferenceLT);

#define tutorialsAllocated tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 /*&& tutorial_venue_is_allocated[3]!=0*/;
#assert P_AllocateAll() reaches tutorialsAllocated with max(tutorialUtilization);
#assert P_AllocateAll() reaches tutorialsAllocated with min(usageDistributionDifferenceTR);

#define highestUT (tutorialUtilization+lectureUtilization)/(numOfModules+numOfTutorials);
#assert P_AllocateAll() reaches ScheduleUTandAverageChecked with max(highestUT);

#define lowestDistributionDifference (usageDistributionDifferenceLT+usageDistributionDifferenceTR)/(numOfLTs+numOfTRs);
#assert P_AllocateAll() reaches ScheduleUTandAverageChecked with min(lowestDistributionDifference);


// this is checking that if we are checking an LT average and UT rate, it always implies that all the lectures have been allocated already. 
#define LTUTandAverageChecked checkedLTAvg == true && checkedLTUT == true;	
#assert P_AllocateAll() |= [](LTUTandAverageChecked -> lecturesAllocated);

#define ScheduleUTandAverageChecked checkedTRAvg == true && checkedTRUT == true;
#assert P_AllocateAll() |= [](ScheduleUTandAverageChecked -> tutorialsAllocated);
#assert P_AllocateAll() |= [](ScheduleUTandAverageChecked -> lecturesAllocated);

//this ensures that if a non clashing schedule can be generated, it implies that an optimal schedule is possible.
#define optimalSchedule usageDistributionDifferenceTR!=infinity && tutorialUtilization!=empty && usageDistributionDifferenceLT!=infinity && lectureUtilization!=empty;
#assert P_AllocateAll() |= <>(noClash -> optimalSchedule);

// Check utilization rate and usage distribution of every completed schedule
#define completeSchedule tutorial_venue_is_allocated[1]!=0 && tutorial_venue_is_allocated[2]!=0 /*&& tutorial_venue_is_allocated[3]!=0*/ && lecture_venue_is_allocated[1]!=0 && lecture_venue_is_allocated[2]!=0 /*&& lecture_venue_is_allocated[3]!=0*/;
#assert P_AllocateAll() |= <>(completeSchedule->ScheduleUTandAverageChecked);




