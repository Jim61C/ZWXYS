#import "PAT.List";
#import "Module_List";

enum {dummy_mod, CS1010, CS1020, CS2010, CS2100, CS3230, CS4211};
enum {dummy_L, LCS1010, LCS1020, LCS2010, LCS2100, LCS3230, LCS4211};	//Lecturer
enum {dummy_TA, TA1CS1010, TA1CS1020, TA1CS2010, TA1CS2100, TA1CS3230, TA1CS4211};	//TA
enum {dummy_LT, LT1, LT2};	//lecture venue
enum {dummy_TR, TR1,TR2,TR3};	//tutorial venue
enum {dummy_t, t0800,t0830,t0900,t0930,t1000,t1030,t1100,t1130,t1200,t1230,t1300,t1330,t1400,t1430,t1500,t1530,t1600,t1630,t1700,t1730,t1800,t1830,t1900,t1930}; //starting timeslots
enum {dummy_day, Mon, Tue, Wed, Thu, Fri};

//var <List> ModuleTutor_CS1010;
//var <List> ModuleTutor_CS1020;
//var <List> ModuleTutor_CS2010;
//var <List> ModuleTutor_CS2100;
//var <List> ModuleTutor_CS3230;
var <List> PAT_List;
var <ModuleList> Module_list;
//var <ModuleList> t3;
//var <ModuleList> t4;
var <Module> Module1;
var <TA> TA1;

#define numOfModule 6;
#define numOfTutorial 6;
#define numOfTimeslot 12; 
#define numOfTA 6;
#define numOfLecturer 6;
#define numOfLT 2;
#define numOfTR 3;


var lecturers[numOfLecturer+1] = [dummy_L, LCS1010, LCS1020, LCS2010, LCS2100, LCS3230, LCS4211];
var TAs[numOfTA+1] = [dummy_TA, TA1CS1010, TA1CS1020, TA1CS2010, TA1CS2100, TA1CS3230, TA1CS4211];
var lecture_duration[numOfModule+1] = [dummy_mod,4,4,4,4,4,5];
var tuturial_duration[numOfModule+1] = [dummy_mod,2,2,2,2,2,2];

// _size[venue_idx] = int
var module_size[numOfModule+1] = [dummy_mod,200,120,100, 120, 80,85];
var tutorial_size[numOfTutorial+1] = [dummy_mod,200,120,100, 120, 80, 85]; // same as module size for now
var TR_size[numOfTR+1] = [dummy_TR,250,100,100];
var LT_size[numOfLT+1] = [dummy_LT,100,250];

// staff available slots [lecturer_idx,slot_idx] = 0 for avail, 1 for taken
var lecturer_avail[numOfLecturer+1][numOfTimeslot+1];
var TA_avail[numOfTA+1][numOfTimeslot+1];

// venue available slots [venue_idx,slot_idx] = bool
var LT_avail[numOfLT+1][numOfTimeslot+1];
var TR_avail[numOfTR+1][numOfTimeslot+1];

//process of initialize an array



Initialize =atomic{add_module{ Module_list.Add(new Module())} ->add_module{ Module_list.Add ( new Module())}->Skip};






